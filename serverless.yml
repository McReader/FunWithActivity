# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: mcreader
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: fun-with-activity
# "service" is the name of this project. This will also be added to your AWS resource names.
service: FunWithActivity

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  environment:
    USER_STATS_TABLE: ${self:service}-${self:provider.stage}-user-stats
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:GetItem
          Resource: !GetAtt UserStatsTable.Arn
        - Effect: Allow
          Action:
            - kinesis:GetRecords
            - kinesis:GetShardIterator
            - kinesis:DescribeStream
            - kinesis:ListShards
          Resource: !GetAtt ActivityStream.Arn

functions:
  processStreamLogs:
    handler: src/functions/ingestion/processStreamLogs.handler
    events:
      - stream:
          type: kinesis
          arn: !GetAtt ActivityStream.Arn
          batchSize: 25
          startingPosition: LATEST
          maximumRetryAttempts: 3

  processUserStatsChanges:
    handler: src/functions/recommendations/processUserStatsChanges.handler
    role: !GetAtt ProcessUserStatsChangesRole.Arn
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt UserStatsTable.StreamArn
          batchSize: 25
          startingPosition: LATEST
          maximumRetryAttempts: 3
    environment:
      STATE_MACHINE_ARN: !Ref RecommendationsWorkflow  # Add this

  getRecommendationsA:
    handler: src/functions/recommendations/getRecommendationsA.handler

  getRecommendationsB:
    handler: src/functions/recommendations/getRecommendationsB.handler

  aggregateRecommendations:
    handler: src/functions/recommendations/aggregateRecommendations.handler
    environment:
      RECOMMENDATIONS_TABLE: ${self:service}-${self:provider.stage}-user-recommendations

resources:
  Resources:
    ActivityStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:service}-${self:provider.stage}-activity-stream
        ShardCount: 1
        RetentionPeriodHours: 24

    UserStatsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-user-stats
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    ProcessUserStatsChangesRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: StepFunctionsInvoke
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - states:StartExecution
                  Resource: !Ref RecommendationsWorkflow
          - PolicyName: DynamoDBStreamRead
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:DescribeStream
                    - dynamodb:ListStreams
                  Resource: !GetAtt UserStatsTable.StreamArn

    StatesExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: states.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - !GetAtt GetRecommendationsALambdaFunction.Arn
                    - !GetAtt GetRecommendationsBLambdaFunction.Arn
                    - !GetAtt AggregateRecommendationsLambdaFunction.Arn

    RecommendationsWorkflow:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        StateMachineName: ${self:service}-${self:provider.stage}-recommendations
        Definition:
          StartAt: ParallelRecommendations
          States:
            ParallelRecommendations:
              Type: Parallel
              Next: AggregateResults
              Branches:
                - StartAt: GetRecommendationsA
                  States:
                    GetRecommendationsA:
                      Type: Task
                      Resource: !GetAtt GetRecommendationsALambdaFunction.Arn
                      Retry:
                        - ErrorEquals: [ "States.ALL" ]
                          IntervalSeconds: 1
                          MaxAttempts: 2
                          BackoffRate: 2
                      Catch:
                        - ErrorEquals: [ "States.ALL" ]
                          ResultPath: "$.error"
                          Next: HandleRecommendationsAError
                      End: true
                    HandleRecommendationsAError:
                      Type: Pass
                      Result: {}
                      End: true
                - StartAt: GetRecommendationsB
                  States:
                    GetRecommendationsB:
                      Type: Task
                      Resource: !GetAtt GetRecommendationsBLambdaFunction.Arn
                      Retry:
                        - ErrorEquals: [ "States.ALL" ]
                          IntervalSeconds: 1
                          MaxAttempts: 2
                          BackoffRate: 2
                      Catch:
                        - ErrorEquals: [ "States.ALL" ]
                          ResultPath: "$.error"
                          Next: HandleRecommendationsBError
                      End: true
                    HandleRecommendationsBError:
                      Type: Pass
                      Result: {}
                      End: true
            AggregateResults:
              Type: Task
              Resource: !GetAtt AggregateRecommendationsLambdaFunction.Arn
              End: true
        RoleArn: !GetAtt StatesExecutionRole.Arn

    ApiGatewayRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: KinesisPutRecordPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - kinesis:PutRecord
                  Resource: !GetAtt ActivityStream.Arn

    ActivityApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-${self:provider.stage}-activity-api
        ProtocolType: HTTP

    ActivityIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref ActivityApi
        IntegrationType: AWS_PROXY
        IntegrationSubtype: Kinesis-PutRecord
        PayloadFormatVersion: '1.0'
        RequestParameters:
          StreamName: !Ref ActivityStream
          Data: $request.body
          PartitionKey: default
        CredentialsArn: !GetAtt ApiGatewayRole.Arn

    ActivityRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref ActivityApi
        RouteKey: 'POST /activity'
        Target: !Join
          - /
          - - integrations
            - !Ref ActivityIntegration

    ApiStage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        ApiId: !Ref ActivityApi
        StageName: ${self:provider.stage}
        AutoDeploy: true

outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Ref ActivityApi
